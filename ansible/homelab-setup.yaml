---
# - name: Setup Plex.
#   hosts: homelab_plex_hosts
#   become: yes
#   gather_facts: yes
#   tags: [docker_plex]

#   roles:
#     - plex

# - name: Setup Jellyfin.
#   hosts: homelab_jellyfin_hosts
#   become: yes
#   gather_facts: yes
#   tags: [docker_jellyfin]

#   roles:
#     - jellyfin

- name: Setup Cloudflare Tunnel(s)
  hosts: homelab_docker_cloudflare_hosts
  become: true
  tags: [docker_cloudflare]
  roles:
    - role: docker_compose
      vars:
        compose_app_name: cloudflare
        compose_source_type: file
        compose_file_src: files/docker-compose/cloudflare.compose.yaml
        compose_env:
          CLOUDFLARE_TUNNEL_TOKEN: "{{ lookup('env','CLOUDFLARE_TUNNEL_TOKEN') }}"

- name: Setup Immich (v2.x)
  hosts: homelab_docker_immich2_hosts
  become: yes
  gather_facts: yes
  tags: [docker_immich]

  roles:
    - role: docker_compose
      vars:
        compose_app_name: immich
        compose_immich_version: "v2.1.0"

        # Use the vendor compose from the exact release tag
        compose_source_type: url
        compose_url: "https://github.com/immich-app/immich/releases/download/{{ compose_immich_version }}/docker-compose.yml"

        # Everything here is auto-validated (undefined/empty => fail early)
        compose_env:
          IMMICH_VERSION: "{{ compose_immich_version }}"
          UPLOAD_LOCATION: "/mnt/immich"
          DB_DATA_LOCATION: "/srv/immich/postgres"
          REDIS_DATA_LOCATION: "/srv/immich/redis"
          MODEL_CACHE_LOCATION: "/srv/immich/model-cache"
          COMPOSE_PROJECT_NAME: "immich"
          DB_USERNAME: "postgres"
          DB_DATABASE_NAME: "immich"
          DB_PASSWORD: "{{ lookup('env', 'IMMICH_DB_PASSWORD') }}"

        compose_paths:
          # NFS uploads (do not chown from client; role will verify it's NFS-mounted)
          - path: "/mnt/immich"
            create: false
            mode: "0755"
            nfs: true
            nfs_server: "{{ hostvars['procyon'].ansible_host }}"
            nfs_path: "/mnt/pool1/immich"
            nfs_opts: "rw,sync,hard,intr"

          # Postgres data (local; container will chown on first init)
          - path: "/srv/immich/postgres"
            create: true
            mode: "0755"

          # Redis data (local; volatile)
          - path: "/srv/immich/redis"
            create: true
            mode: "0755"

          # Model cache (local; volatile) â€” leave root-owned
          - path: "/srv/immich/model-cache"
            create: true
            mode: "0755"

- name: Setup Traefik
  hosts: homelab_docker_traefik_hosts
  become: yes
  gather_facts: yes
  tags: [docker_traefik]

  roles:
    - role: docker_compose
      vars:
        compose_app_name: traefik
        compose_source_type: template
        compose_template_src: "templates/docker-compose/traefik.compose.yaml.j2"
        compose_env:
          CLOUDFLARE_EMAIL: "allan.e.lewis@gmail.com"
          CLOUDFLARE_API_KEY: "{{ lookup('env', 'TRAEFIK_CF_API_KEY') }}"
        compose_extra_templates:
          - src: "templates/docker-compose/traefik.config.yaml.j2"
            dest: "/etc/traefik/traefik.yaml"
            uid: 1000
            gid: 1000
        compose_paths:
          - path: "/var/lib/traefik/acme"
            create: true
            uid: 1000
            gid: 1000
            mode: "0755"
          - path: "/etc/traefik"
            create: true
            uid: 1000
            gid: 1000
            mode: "0755"

- name: Setup Pi-Hole.
  hosts: homelab_docker_pihole_hosts
  become: yes
  gather_facts: yes
  tags: [docker_pihole]

  roles:
    - role: pihole_pre
    - role: docker_compose
      vars:    
        homelab_pihole_admin_password: "{{ lookup('env', 'PIHOLE_ADMIN_PASSWORD') }}"
        homelab_pihole_upstreams:
          - "1.1.1.1"
          - "1.0.0.1"
          - "9.9.9.9"
          - "149.112.112.112"
        compose_app_name: pihole
        compose_source_type: template
        compose_template_src: "templates/docker-compose/pihole.compose.yaml.j2"
        compose_paths:
          - path: "/var/lib/pihole"
            create: true
            mode: "0755"
    - role: pihole_post
    - role: pihole_dns

- name: setup media acquisition
  hosts: homelab_docker_media_acquisition_hosts
  become: yes
  gather_facts: yes
  tags: [docker_media_acquisition]

  roles:
    - role: docker_compose
      vars:
        compose_app_name: media_acquisition
        compose_source_type: file
        compose_file_src: files/docker-compose/media_acquisition.compose.yaml
        compose_paths:
          - path: "/etc/jackett"
            create: true
            uid: 1000
            gid: 1000
            mode: "0755"
          - path: "/etc/lidarr"
            create: true
            uid: 1000
            gid: 1000
            mode: "0755"
          - path: "/etc/radarr"
            create: true
            uid: 1000
            gid: 1000
            mode: "0755"
          - path: "/etc/sonarr"
            create: true
            uid: 1000
            gid: 1000
            mode: "0755"
          - path: "/etc/transmission"
            create: true
            uid: 1000
            gid: 1000
            mode: "0755"
          - path: "/var/lib/jackett/downloads"
            create: true
            uid: 1000
            gid: 1000
            mode: "0755"
          - path: "/var/lib/transmission/watch"
            create: true
            uid: 1000
            gid: 1000
            mode: "0755"
          - path: "/mnt/media-acquisition"
            create: true
            mode: "0755"
            nfs: true
            nfs_server: "{{ hostvars['procyon'].ansible_host }}"
            nfs_path: "/mnt/pool1/media-acquisition"
            nfs_opts: "rw,sync,hard,intr"

- hosts: castor
  become: yes
  gather_facts: yes
  tags: [backup_runner]

  roles:
    - backup_runner 