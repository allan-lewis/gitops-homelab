---
- name: install docker and its dependencies
  hosts: docker
  become: yes
  gather_facts: yes
  tags: [docker]

  roles:
    - docker

- name: install monitoring
  hosts: docker_monitoring
  become: yes
  gather_facts: yes
  tags: [docker_monitoring]

  roles:
    - role: docker_compose
      vars:
        compose_app_name: monitoring
        compose_source_type: template
        compose_template_src: "templates/docker-compose/monitoring.compose.yaml.j2"

- name: install gatus
  hosts: docker_gatus
  become: yes
  gather_facts: yes
  tags: [docker_gatus]

  roles:
    - role: docker_compose
      vars:
        compose_app_name: gatus
        compose_source_type: template
        compose_template_src: "templates/docker-compose/gatus.compose.yaml.j2"
        compose_extra_templates:
          - src: "templates/docker-compose/gatus.config.yaml.j2"
            dest: "/etc/gatus/config.yaml"
            uid: 1000
            gid: 1000
        compose_paths:
          - path: "/var/lib/gatus"
            create: true
            uid: 1000
            gid: 1000
            mode: "0755"
          - path: "/etc/gatus"
            create: true
            uid: 1000
            gid: 1000
            mode: "0755"

  post_tasks:
    - name: setup backup fragments for gatus
      include_tasks: "playbooks/includes/backup_fragments.yaml"
      vars:
        backup_known_hosts: ['procyon']
        backup_fragments:
          - name: "docker-gatus.conf"
            header: "gatus config and data"
            pairs:
              - { src: "/etc/gatus",
                  dest: "allan@{{ hostvars['procyon'].ansible_host }}:/mnt/pool1/gitops-homelab/backup-runner/{{ inventory_hostname }}/gatus/config" }
              - { src: "/var/lib/gatus",
                  dest: "allan@{{ hostvars['procyon'].ansible_host }}:/mnt/pool1/gitops-homelab/backup-runner/{{ inventory_hostname }}/gatus/data" }

- name: install traefik
  hosts: docker_traefik
  become: yes
  gather_facts: yes
  tags: [docker_traefik]

  roles:
    - role: docker_compose
      vars:
        compose_app_name: traefik
        compose_source_type: template
        compose_template_src: "templates/docker-compose/traefik.compose.yaml.j2"
        compose_env:
          CLOUDFLARE_EMAIL: "allan.e.lewis@gmail.com"
          CLOUDFLARE_API_KEY: "{{ lookup('env', 'TRAEFIK_CF_API_KEY') }}"
        compose_extra_templates:
          - src: "templates/docker-compose/traefik.config.yaml.j2"
            dest: "/etc/traefik/traefik.yaml"
            uid: 1000
            gid: 1000
        compose_paths:
          - path: "/var/lib/traefik/acme"
            create: true
            uid: 1000
            gid: 1000
            mode: "0755"
          - path: "/etc/traefik"
            create: true
            uid: 1000
            gid: 1000
            mode: "0755"

  post_tasks:
    - name: setup backup fragments for traefik
      include_tasks: "playbooks/includes/backup_fragments.yaml"
      vars:
        backup_known_hosts: ['procyon']
        backup_fragments:
          - name: "docker-traefik.conf"
            header: "traefik config and acme state"
            pairs:
              - { src: "/var/lib/traefik/acme",
                  dest: "allan@{{ hostvars['procyon'].ansible_host }}:/mnt/pool1/gitops-homelab/backup-runner/{{ inventory_hostname }}/traefik/acme" }
              - { src: "/etc/traefik",
                  dest: "allan@{{ hostvars['procyon'].ansible_host }}:/mnt/pool1/gitops-homelab/backup-runner/{{ inventory_hostname }}/traefik/config" }

- name: install immich
  hosts: docker_immich
  become: yes
  gather_facts: yes
  tags: [docker_immich]

  roles:
    - role: docker_compose
      vars:
        compose_app_name: immich
        compose_immich_version: "v2.1.0"

        # Use the vendor compose from the exact release tag
        compose_source_type: url
        compose_url: "https://github.com/immich-app/immich/releases/download/{{ compose_immich_version }}/docker-compose.yml"

        # Everything here is auto-validated (undefined/empty => fail early)
        compose_env:
          IMMICH_VERSION: "{{ compose_immich_version }}"
          UPLOAD_LOCATION: "/mnt/immich"
          DB_DATA_LOCATION: "/srv/immich/postgres"  
          REDIS_DATA_LOCATION: "/srv/immich/redis"
          MODEL_CACHE_LOCATION: "/srv/immich/model-cache"
          COMPOSE_PROJECT_NAME: "immich"
          DB_USERNAME: "postgres"
          DB_DATABASE_NAME: "immich"
          DB_PASSWORD: "{{ lookup('env', 'IMMICH_DB_PASSWORD') }}"

        compose_paths:
          # NFS uploads (do not chown from client; role will verify it's NFS-mounted)
          - path: "/mnt/immich"
            nfs: true
            nfs_server: "{{ hostvars['procyon'].ansible_host }}"
            nfs_path: "/mnt/pool1/immich"
            nfs_opts: "rw,sync,hard,intr"

          # Postgres data (local; container will chown on first init)
          - path: "/srv/immich/postgres"
            create: true
            mode: "0755"

          # Redis data (local; volatile)
          - path: "/srv/immich/redis"
            create: true
            mode: "0755"

          # Model cache (local; volatile) â€” leave root-owned
          - path: "/srv/immich/model-cache"
            create: true
            mode: "0755"

- name: install pi-hole
  hosts: docker_pihole
  become: yes
  gather_facts: yes
  tags: [docker_pihole]

  roles:
    - role: pihole_pre
    - role: docker_compose
      vars:    
        compose_app_name: pihole
        compose_source_type: template
        compose_template_src: "templates/docker-compose/pihole.compose.yaml.j2"
        compose_paths:
          - path: "/var/lib/pihole"
            create: true
            mode: "0755"
    - role: pihole_post
    - role: pihole_dns

  post_tasks:
    - name: setup backup fragments for traefik
      include_tasks: "playbooks/includes/backup_fragments.yaml"
      vars:
        backup_known_hosts: ['procyon']
        backup_fragments:
          - name: "docker-pihole.conf"
            header: "pihole config and data"
            pairs:
              - { src: "/var/lib/pihole",
                  dest: "allan@{{ hostvars['procyon'].ansible_host }}:/mnt/pool1/gitops-homelab/backup-runner/{{ inventory_hostname }}/pihole/data" }

- name: install cloudflare tunnels
  hosts: docker_cloudflare
  become: true
  tags: [docker_cloudflare]
  roles:
    - role: docker_compose
      vars:
        compose_app_name: cloudflare
        compose_source_type: file
        compose_file_src: files/docker-compose/cloudflare.compose.yaml
        compose_env:
          CLOUDFLARE_TUNNEL_TOKEN: "{{ lookup('env','CLOUDFLARE_TUNNEL_TOKEN') }}"

- name: install media acquisition
  hosts: docker_media_acquisition
  become: yes
  gather_facts: yes
  tags: [docker_media_acquisition]

  roles:
    - role: docker_compose
      vars:
        compose_app_name: media_acquisition
        compose_source_type: file
        compose_file_src: files/docker-compose/media_acquisition.compose.yaml
        compose_paths:
          - path: "/etc/jackett"
            create: true
            uid: 1000
            gid: 1000
            mode: "0755"
          - path: "/etc/lidarr"
            create: true
            uid: 1000
            gid: 1000
            mode: "0755"
          - path: "/etc/radarr"
            create: true
            uid: 1000
            gid: 1000
            mode: "0755"
          - path: "/etc/sonarr"
            create: true
            uid: 1000
            gid: 1000
            mode: "0755"
          - path: "/etc/transmission"
            create: true
            uid: 1000
            gid: 1000
            mode: "0755"
          - path: "/var/lib/jackett/downloads"
            create: true
            uid: 1000
            gid: 1000
            mode: "0755"
          - path: "/var/lib/transmission/watch"
            create: true
            uid: 1000
            gid: 1000
            mode: "0755"
          - path: "/mnt/media-acquisition"
            nfs: true
            nfs_server: "{{ hostvars['procyon'].ansible_host }}"
            nfs_path: "/mnt/pool1/media-acquisition"
            nfs_opts: "rw,sync,hard,intr"

  post_tasks:
    - name: setup backup fragments for media acquisition
      include_tasks: "playbooks/includes/setup_backups.yml"
      vars:
        backup_known_hosts: ['procyon']
        backup_fragments:
          - name: "docker-mediaapps.conf"
            header: "jackett/lidarr/radarr/sonarr/transmission config (+ selected data)"
            pairs:
              # - { src: "/etc/jackett",
              #     dest: "allan@{{ hostvars['procyon'].ansible_host }}:/mnt/pool1/gitops-homelab/backup-runner/{{ inventory_hostname }}/jackett/config" }
              # - { src: "/etc/lidarr",
              #     dest: "allan@{{ hostvars['procyon'].ansible_host }}:/mnt/pool1/gitops-homelab/backup-runner/{{ inventory_hostname }}/lidarr/config" }
              # - { src: "/etc/radarr",
              #     dest: "allan@{{ hostvars['procyon'].ansible_host }}:/mnt/pool1/gitops-homelab/backup-runner/{{ inventory_hostname }}/radarr/config" }
              # - { src: "/etc/sonarr",
              #     dest: "allan@{{ hostvars['procyon'].ansible_host }}:/mnt/pool1/gitops-homelab/backup-runner/{{ inventory_hostname }}/sonarr/config" }
              - { src: "/etc/transmission",
                  dest: "allan@{{ hostvars['procyon'].ansible_host }}:/mnt/pool1/gitops-homelab/backup-runner/{{ inventory_hostname }}/transmission/config" }
              # - { src: "/var/lib/jackett/downloads",
              #     dest: "allan@{{ hostvars['procyon'].ansible_host }}:/mnt/pool1/gitops-homelab/backup-runner/{{ inventory_hostname }}/jackett/downloads" }
              - { src: "/var/lib/transmission/watch",
                  dest: "allan@{{ hostvars['procyon'].ansible_host }}:/mnt/pool1/gitops-homelab/backup-runner/{{ inventory_hostname }}/transmission/watch" }

- name: install jellyfin
  hosts: docker_jellyfin
  become: yes
  gather_facts: yes
  tags: [docker_jellyfin]

  roles:
    - role: docker_compose
      vars:   
        compose_app_name: jellyfin
        compose_source_type: template
        compose_template_src: templates/docker-compose/jellyfin.compose.yaml.j2

        compose_env:
          JELLYFIN_PUBLISHED_URL: "https://jellyfin.media.allanshomelab.com"
          JELLYFIN_USER_UID: "1000"
          JELLYFIN_GROUP_GID: "1000"

        compose_paths:
          - path: "/srv/jellyfin/config"
            create: true
            uid: 1000
            gid: 1000
            mode: "0755"

          - path: "/srv/jellyfin/cache"
            create: true
            uid: 1000
            gid: 1000
            mode: "0755"

          - path: "/mnt/media-library"
            nfs: true
            nfs_server: "{{ hostvars['procyon'].ansible_host }}"
            nfs_path: "/mnt/pool1/media-library"
            nfs_opts: "ro,sync,hard,intr"

- name: install plex
  hosts: docker_plex
  become: yes
  gather_facts: yes
  tags: [docker_plex]

  roles:
    - role: docker_compose
      vars:  
        compose_app_name: plex
        compose_source_type: template
        compose_template_src: templates/docker-compose/plex.compose.yaml.j2

        compose_env:
          PLEX_TZ: "America/New_York"
          PLEX_PUID: 1000
          PLEX_PGID: 1000

        compose_paths:
          - path: "/srv/plex/config"
            create: true
            uid: 1000
            gid: 1000
            mode: "0755"

          - path: "/srv/plex/transcode"
            create: true
            uid: 1000
            gid: 1000
            mode: "0755"

          - path: "/mnt/media-library"
            nfs: true
            nfs_server: "{{ hostvars['procyon'].ansible_host }}"
            nfs_path: "/mnt/pool1/media-library"
            nfs_opts: "ro,sync,hard,intr"
