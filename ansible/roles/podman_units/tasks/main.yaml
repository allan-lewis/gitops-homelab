---
# 1) Discover files
- name: Discover unit files from directory (optional)
  vars: { _dir: "{{ pod_units_dir | trim }}" }
  set_fact:
    pod_units_files: >-
      {{ (pod_units_files | default([])) +
         (lookup('ansible.builtin.fileglob', _dir ~ '/*.yml', wantlist=True) | default([])) }}
  when: _dir != ""

- name: Fail if no unit files provided
  assert:
    that: pod_units_files | length > 0
    fail_msg: "No unit files provided. Set pod_units_files or pod_units_dir."

# 2) Load each file (expects a top-level 'units:' list)
- name: Load unit file
  include_vars:
    file: "{{ item }}"
    name: __app
  loop: "{{ pod_units_files }}"
  register: __loaded

- name: Merge units
  set_fact:
    pod_units: "{{ (pod_units | default([])) + (__item.ansible_facts.__app.units | default([])) }}"
  loop: "{{ __loaded.results }}"
  loop_control: { loop_var: __item }

- name: Show merged units (summary)
  debug:
    msg: "{{ pod_units | map(attribute='name') | list | join(', ') }}"

# 3) Ensure user systemd dir
- name: Ensure user systemd dir exists
  file:
    path: "/home/{{ pod_units_user }}/.config/systemd/user"
    state: directory
    owner: "{{ pod_units_user }}"
    group: "{{ pod_units_user }}"
    mode: "0755"

# 4) Write units (native systemd)
- name: Deploy user units
  copy:
    content: "{{ item.content }}"
    dest: "/home/{{ pod_units_user }}/.config/systemd/user/{{ item.name }}.{{ item.type | default('service') }}"
    owner: "{{ pod_units_user }}"
    group: "{{ pod_units_user }}"
    mode: "0644"
  loop: "{{ pod_units }}"
  register: pod_units_deploy

# 5) Prepare user-bus env
- name: Get UID for {{ pod_units_user }} on remote
  become: true
  command: "id -u {{ pod_units_user }}"
  register: pod_uid
  changed_when: false

# 6) Reload user systemd only if something changed
- name: Reload user systemd
  when: pod_units_deploy.changed
  become: true
  become_user: "{{ pod_units_user }}"
  environment:
    XDG_RUNTIME_DIR: "/run/user/{{ pod_uid.stdout }}"
    DBUS_SESSION_BUS_ADDRESS: "unix:path=/run/user/{{ pod_uid.stdout }}/bus"
  systemd:
    daemon_reload: true
    scope: user

# 7) Enable + start all *services* (no bounce if unchanged)
- name: Enable/start services
  become: true
  become_user: "{{ pod_units_user }}"
  environment:
    XDG_RUNTIME_DIR: "/run/user/{{ pod_uid.stdout }}"
    DBUS_SESSION_BUS_ADDRESS: "unix:path=/run/user/{{ pod_uid.stdout }}/bus"
  systemd:
    name: "{{ item.name }}.service"
    scope: user
    enabled: true
    state: started
  loop: "{{ pod_units | selectattr('type','equalto','service') | list }}"

# 8) Restart only services whose files changed (Compose-like delta behavior)
- name: Build list of changed services
  set_fact:
    pod_units_changed_services: >-
      {{ pod_units_deploy.results
         | selectattr('changed','equalto',true)
         | map(attribute='item')
         | selectattr('type','equalto','service')
         | map(attribute='name')
         | list }}

- name: Restart changed services
  when: pod_units_changed_services | length > 0
  become: true
  become_user: "{{ pod_units_user }}"
  environment:
    XDG_RUNTIME_DIR: "/run/user/{{ pod_uid.stdout }}"
    DBUS_SESSION_BUS_ADDRESS: "unix:path=/run/user/{{ pod_uid.stdout }}/bus"
  systemd:
    name: "{{ item }}.service"
    scope: user
    state: restarted
  loop: "{{ pod_units_changed_services }}"
