---
- name: Install Docker CLI compatibility (podman-docker)
  tags: [step4_extras]
  ansible.builtin.apt:
    name: podman-docker
    state: present
    update_cache: true
  when: install_docker_compat

- name: Ensure pipx env profile for all shells
  tags: [step4_extras]
  ansible.builtin.copy:
    dest: /etc/profile.d/pipx.sh
    mode: "0644"
    content: |
      export PIPX_BIN_DIR=/usr/local/bin
      export PIPX_HOME=/opt/pipx
      export PIPX_LOCAL_VENVS=/opt/pipx/venvs
      export PATH="$PIPX_BIN_DIR:$PATH"
  when: install_podman_compose

- name: Create pipx dirs
  tags: [step4_extras]
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    mode: "0755"
  loop:
    - /opt/pipx
    - /opt/pipx/venvs
  when: install_podman_compose

- name: Install podman-compose via pipx
  tags: [step4_extras]
  ansible.builtin.command: pipx install podman-compose
  args:
    creates: /opt/pipx/venvs/podman-compose
  environment:
    PIPX_HOME: /opt/pipx
    PIPX_BIN_DIR: /usr/local/bin
    PIPX_LOCAL_VENVS: /opt/pipx/venvs
  when: install_podman_compose

- name: Enable Podman API socket (root)
  tags: [step4_extras]
  ansible.builtin.systemd:
    name: podman.socket
    state: started
    enabled: true
  when: enable_podman_socket_root

# Ensure dbus user session is available (required on headless hosts)
- name: Install dbus-user-session (needed for user systemd/dbus)
  tags: [step4_extras]
  ansible.builtin.apt:
    name: dbus-user-session
    state: present
    update_cache: true
  when: enable_podman_socket_user

# Make sure lingering is enabled for each user (idempotent)
- name: Check lingering state
  tags: [step4_extras]
  ansible.builtin.stat:
    path: "/var/lib/systemd/linger/{{ user }}"
  register: _linger_stats
  loop: "{{ podman_users }}"
  loop_control: { loop_var: user }
  when: enable_podman_socket_user

- name: Enable lingering if missing
  tags: [step4_extras]
  ansible.builtin.command: "loginctl enable-linger {{ item.item }}"
  when:
    - enable_podman_socket_user
    - not (item.stat.exists | default(false))
  loop: "{{ _linger_stats.results }}"
  loop_control: { loop_var: item }

# Get UID for each user (remote)
- name: Resolve UID for each user
  tags: [step4_extras]
  ansible.builtin.command: "id -u {{ user }}"
  register: _uid_cmds
  changed_when: false
  loop: "{{ podman_users }}"
  loop_control: { loop_var: user }
  when: enable_podman_socket_user

# Build a simple list of {user, uid} dicts to avoid nested item.item
- name: Build userâ†’uid map
  tags: [step4_extras]
  ansible.builtin.set_fact:
    podman_user_uid_list: >-
      {{ (podman_user_uid_list | default([]))
         + [ {'user': podman_users[idx], 'uid': (_uid_cmds.results[idx].stdout | string | trim)} ] }}
  loop: "{{ range(0, (podman_users | length)) | list }}"
  loop_control:
    loop_var: idx
  when: enable_podman_socket_user

# Start the per-user systemd instance (creates the user bus on headless hosts)
- name: Start user@UID systemd instance
  tags: [step4_extras]
  ansible.builtin.systemd:
    name: "user@{{ entry.uid }}.service"
    state: started
    enabled: false   # lingering makes it start at boot
  loop: "{{ podman_user_uid_list | default([]) }}"
  loop_control: { loop_var: entry }
  when: enable_podman_socket_user

# Ensure XDG runtime dir exists with correct ownership
- name: Ensure /run/user/{{ entry.uid }} exists
  tags: [step4_extras]
  ansible.builtin.file:
    path: "/run/user/{{ entry.uid }}"
    state: directory
    owner: "{{ entry.user }}"
    group: "{{ entry.user }}"
    mode: "0700"
  loop: "{{ podman_user_uid_list | default([]) }}"
  loop_control: { loop_var: entry }
  when: enable_podman_socket_user

# Enable + start the Podman user socket (no shell, via systemd module)
- name: Enable and start podman.socket for each user
  tags: [step4_extras]
  become: true
  become_user: "{{ entry.user }}"
  environment:
    XDG_RUNTIME_DIR: "/run/user/{{ entry.uid }}"
    DBUS_SESSION_BUS_ADDRESS: "unix:path=/run/user/{{ entry.uid }}/bus"
  ansible.builtin.systemd:
    name: podman.socket
    scope: user
    state: started
    enabled: true
    daemon_reload: true
  loop: "{{ podman_user_uid_list | default([]) }}"
  loop_control: { loop_var: entry }
  when: enable_podman_socket_user
