---
- name: ensure nftables is installed
  ansible.builtin.apt:
    name: nftables
    state: present
    update_cache: yes

# 1) read the conf
- name: read openvpn conf
  ansible.builtin.slurp:
    src: "{{ openvpn_conf }}"
  register: ovpn_raw

# 2) decode
- name: decode openvpn conf
  ansible.builtin.set_fact:
    ovpn_text: "{{ ovpn_raw.content | b64decode }}"

# 3) extract all 'remote <host> <port>' pairs (first one wins)
- name: extract remote pairs
  ansible.builtin.set_fact:
    remote_pairs: "{{ ovpn_text | regex_findall('^remote\\s+(\\S+)\\s+(\\d+)', multiline=True) }}"

# 4) pick the first pair and validate
- name: select and validate remote host/port
  ansible.builtin.set_fact:
    parsed_remote_host: "{{ (remote_pairs | first | default(['','']))[0] }}"
    parsed_remote_port: "{{ (remote_pairs | first | default(['','']))[1] }}"
  when: (remote_pairs | length) > 0

- name: fail if we cannot parse a remote host/port
  ansible.builtin.fail:
    msg: "could not parse remote host/port from {{ openvpn_conf }}"
  when: parsed_remote_host | default('') | length == 0 or parsed_remote_port | default('') | length == 0

- name: decide vpn port
  ansible.builtin.set_fact:
    effective_vpn_port: "{{ (vpn_port | length > 0) | ternary(vpn_port, parsed_remote_port) }}"

- name: resolve vpn server ipv4 addresses
  ansible.builtin.command: getent ahostsv4 {{ parsed_remote_host }}
  register: getent_out
  changed_when: false

- name: build vpn_server_ips list
  ansible.builtin.set_fact:
    vpn_server_ips: "{{ (getent_out.stdout_lines | map('regex_replace', '^(\\S+).*', '\\1') | list) | unique }}"

- name: fail if no vpn server ips resolved
  ansible.builtin.fail:
    msg: "no vpn server IPs resolved for {{ parsed_remote_host }}"
  when: vpn_server_ips | length == 0

- name: render nftables rules
  ansible.builtin.template:
    src: nftables.conf.j2
    dest: /etc/nftables.conf
    mode: "0644"
  notify: restart nftables

- name: ensure nftables is running
  ansible.builtin.systemd:
    name: nftables
    state: started
    enabled: true

- name: restart openvpn
  ansible.builtin.systemd:
    name: "{{ openvpn_unit }}"
    state: restarted
