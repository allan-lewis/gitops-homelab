---
- name: Determine list of SSH host targets
  set_fact:
    homelab_target_hosts: "{{ homelab_ssh_keys | default(groups['ubuntu'], true) }}"

- name: Map hostnames to IPs if needed
  set_fact:
    homelab_host_map: >-
      {{
        dict(
          homelab_target_hosts | zip(
            homelab_target_hosts | map('extract', hostvars, 'ansible_host')
            if homelab_ansible_translate_ip | default(true) | bool
            else homelab_target_hosts
          )
        )
      }}

- name: Ensure known_hosts file exists
  ansible.builtin.file:
    path: "~/.ssh/known_hosts"
    state: touch
    mode: '0600'

- name: Fetch SSH keys with ssh-keyscan
  ansible.builtin.command:
    cmd: "ssh-keyscan -T 5 -t rsa {{ item.value }}"
  loop: "{{ homelab_host_map | dict2items }}"
  loop_control:
    label: "{{ item.key }}"
  register: scanned_keys
  changed_when: false
  failed_when: false

- name: Build list of valid scanned host entries (strip comments)
  set_fact:
    known_hosts_entries: "{{ known_hosts_entries | default([]) + [ {
      'host': item.item.key,
      'addr': item.item.value,
      'key': (
        item.stdout_lines
        | select('match', '^[^#]')
        | list
        | join('\n')
      )
    } ] }}"
  loop: "{{ scanned_keys.results }}"
  when: item.rc == 0

- name: Remove any existing known_hosts entry for each host
  ansible.builtin.known_hosts:
    name: "{{ item.addr }}"
    state: absent
    path: "~/.ssh/known_hosts"
  loop: "{{ known_hosts_entries | default([]) }}"
  loop_control:
    label: "{{ item.host }}"

- name: Add updated host entries to known_hosts
  ansible.builtin.known_hosts:
    name: "{{ item.addr }}"
    key: "{{ item.key }}"
    state: present
    path: "~/.ssh/known_hosts"
  loop: "{{ known_hosts_entries | default([]) }}"
  loop_control:
    label: "{{ item.host }}"
